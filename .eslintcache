[{"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\index.js":"1","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\App.js":"2","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\reportWebVitals.js":"3","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\store\\reducers\\track.js":"4","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\dashboard.js":"5","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\store\\actions\\actions.js":"6","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\sidebar.js":"7","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\screenplayer.js":"8","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\mainView.js":"9","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\player.js":"10","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\store\\actions\\track.js":"11","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\card.js":"12","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\playlist.js":"13","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\dropdown.js":"14","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\backdrop.js":"15","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\item.js":"16","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\divider.js":"17"},{"size":1014,"mtime":1607974466319,"results":"18","hashOfConfig":"19"},{"size":716,"mtime":1608395254591,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":3362,"mtime":1608648139995,"results":"22","hashOfConfig":"19"},{"size":322,"mtime":1608219270905,"results":"23","hashOfConfig":"19"},{"size":696,"mtime":1608327196375,"results":"24","hashOfConfig":"19"},{"size":1556,"mtime":1608065171637,"results":"25","hashOfConfig":"19"},{"size":9591,"mtime":1608531889270,"results":"26","hashOfConfig":"19"},{"size":6826,"mtime":1608653757756,"results":"27","hashOfConfig":"19"},{"size":1104,"mtime":1608699548721,"results":"28","hashOfConfig":"19"},{"size":3039,"mtime":1608644360901,"results":"29","hashOfConfig":"19"},{"size":4588,"mtime":1608653305448,"results":"30","hashOfConfig":"19"},{"size":11925,"mtime":1608653261089,"results":"31","hashOfConfig":"19"},{"size":248,"mtime":1608482138184,"results":"32","hashOfConfig":"19"},{"size":172,"mtime":1608480062665,"results":"33","hashOfConfig":"19"},{"size":297,"mtime":1608483159388,"results":"34","hashOfConfig":"19"},{"size":150,"mtime":1608482778757,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"aekodk",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\index.js",[],["81","82"],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\App.js",["83"],"import './styles/app.scss';\nimport {FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Route , Switch } from 'react-router-dom';\nimport Playlist from './pages/playlist';\nimport Mainview from './pages/mainView';\nimport ScreenPlayer from './pages/screenplayer';\nimport Sidebar from './pages/sidebar';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"dashboard\">\n            <Sidebar/>\n            <Switch>\n            <Route path=\"/\" component={Mainview} exact />\n            <Route path=\"/playlist/:id\" component={Playlist} />\n            <Route path=\"/search\" />\n            </Switch>\n            <ScreenPlayer />\n        </div>\n     \n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\reportWebVitals.js",[],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\store\\reducers\\track.js",["84","85"],"import * as actionTypes from '../actions/actions';\r\nconst initialState = {\r\n    songs:null,\r\n    queue:null,\r\n    repeat:false,\r\n    activePlaylist:null,\r\n    playlists:null,\r\n    trendingPlaylists:null,\r\n    activeSongid:Number,\r\n    activeSongtrack:null,\r\n    activeSongCover:null,\r\n    activeSongName:null,\r\n    activeSongMovie:null,\r\n    activeSongAuthor:null,\r\n    isPlaying:false,\r\n    currentTime:null,\r\n    duration:null,\r\n    loading:false,\r\n    currentPlaylist:null\r\n}\r\n\r\nconst reducer = (state = initialState,action) => {\r\n    switch(action.type) {\r\n        case actionTypes.PLAY_SONG:\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.PAUSE_SONG:\r\n            return {\r\n                ...state\r\n            }\r\n        case actionTypes.SET_SONGS:\r\n            return {\r\n                ...state,\r\n                songs:action.songs,\r\n                loading:!state.loading\r\n            }\r\n        case actionTypes.SET_CURRENT:\r\n            return {\r\n                ...state,\r\n                activeSongid:action.currentSong,\r\n                activeSongName:action.name,\r\n                activeSongAuthor:action.author,\r\n                activeSongMovie:action.movie,\r\n                activeSongtrack:action.audio,\r\n                activeSongCover:action.cover,\r\n                isPlaying:true\r\n            }\r\n        case actionTypes.IS_PLAYING:\r\n            return {\r\n                ...state,\r\n                isPlaying:action.dec\r\n            }\r\n        case actionTypes.SET_CUSTOM:\r\n            return {\r\n                ...state,\r\n                recommended:action.recommended,\r\n                songs:action.songs\r\n            }\r\n        case actionTypes.SET_CURRENT_TIME:\r\n            return {\r\n                ...state,\r\n                currentTime:action.time\r\n            }\r\n        case actionTypes.SET_DURATION:\r\n            return {\r\n                ...state,\r\n                duration:action.duration\r\n            }\r\n        case actionTypes.PAUSE_SONG:\r\n            return {\r\n                ...state,\r\n                isPlaying:false\r\n            }\r\n        case actionTypes.PLAY_SONG:\r\n            return {\r\n                ...state,\r\n                isPlaying:true\r\n            }\r\n        case actionTypes.ADD_QUEUE:\r\n            return {\r\n                ...state,\r\n                queue:action.queueSongs\r\n            }\r\n        case actionTypes.SET_PLAYLISTS:\r\n            return {\r\n                ...state,\r\n                playlists:action.playlistSong,\r\n                trendingPlaylists:action.trending,\r\n                loading:!state.loading\r\n            }\r\n        case actionTypes.SET_ACTIVE_PLAYLIST:\r\n            return {\r\n                ...state,\r\n                activePlaylist:action.songid\r\n            }\r\n        case actionTypes.SET_REPEAT_ON:\r\n            return {\r\n                ...state,\r\n                repeat:!state.repeat\r\n            }\r\n        case actionTypes.SET_CURRENT_PLAYLIST:\r\n            return {\r\n                ...state,\r\n                currentPlaylist:action.data.songs,\r\n                loading:!state.loading\r\n            }\r\n        case actionTypes.LOAD:\r\n            return {\r\n                ...state,\r\n                loading:!state.loading\r\n            }\r\n\r\n        default: \r\n        return initialState\r\n    }\r\n}\r\n\r\nexport default reducer;","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\dashboard.js",["86"],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\store\\actions\\actions.js",[],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\sidebar.js",["87"],"import React from 'react';\r\nimport Logo from '../Assets/spotify.svg';\r\nimport {ReactComponent as Home} from '../Assets/home.svg';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {ReactComponent as Search} from '../Assets/search.svg';\r\nimport {ReactComponent as Library} from '../Assets/library.svg';\r\nimport {ReactComponent as Add} from '../Assets/add.svg';\r\nimport {ReactComponent as Like} from '../Assets/like.svg';\r\n\r\nfunction Sidebar() {\r\n\r\n    return (\r\n       \r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar-wrapper\">\r\n                <div className=\"logo-holder\">\r\n                <img src={Logo} className=\"logo\"/>\r\n                <h2 className=\"sans title-logo\">Spotify<span className=\"r\">&#174;</span></h2>\r\n                </div>\r\n                <ul className=\"basic-list\">\r\n                    <li><NavLink to=\"/\" exact><Home />Home</NavLink></li>\r\n                    <li><NavLink to=\"/search\"><Search />Search</NavLink></li>\r\n                    <li><NavLink to=\"/library\"><Library />Your Library</NavLink></li>\r\n                </ul>\r\n                <ul className=\"playlist\">\r\n                    <h5>PLAYLISTS</h5>\r\n                    <li><NavLink to=\"/playlist\"><div className=\"icon-wrapper\"><Add className=\"playlist-icon\"/></div>Create Playlists</NavLink></li>\r\n                    <li><NavLink to=\"/collection\"><div className=\"icon-wrapper gradient\"><Like /></div>Liked Songs</NavLink></li>\r\n                </ul>\r\n            </div>\r\n         \r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default Sidebar;","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\screenplayer.js",["88","89","90","91","92","93","94"],"import React, { useRef , useEffect, Component} from 'react';\r\nimport {ReactComponent as Arrowup} from '../Assets/arrowup.svg';\r\nimport {ReactComponent as Heart} from '../Assets/heart.svg';\r\nimport {ReactComponent as Pip} from '../Assets/pip.svg';\r\nimport {ReactComponent as Play} from '../Assets/play.svg';\r\nimport {ReactComponent as Previous} from '../Assets/previous.svg';\r\nimport {ReactComponent as Shuffle} from '../Assets/shuffle.svg';\r\nimport {ReactComponent as Next} from '../Assets/next.svg';\r\nimport {ReactComponent as Repeat} from '../Assets/repeat.svg';\r\nimport {ReactComponent as Lyrics} from '../Assets/lyrics.svg';\r\nimport {ReactComponent as Queue} from '../Assets/queue.svg';\r\nimport {ReactComponent as Computer} from '../Assets/computer.svg';\r\nimport {ReactComponent as Pause} from '../Assets/pause.svg';\r\nimport {ReactComponent as Volume} from '../Assets/volume.svg';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport Player from './player';\r\nimport {isPlaying , setCurrentTime , setDuration , setCurrent , setRepeatOn} from '../store/actions/track';\r\n\r\nclass Screenplayer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.audioRef = React.createRef();\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n      \r\n        if(!props.isPlaying) {\r\n            this.audioRef.current.pause();\r\n     } else {\r\n            this.audioRef.current.play();\r\n         }\r\n    }\r\n\r\n    playSongHandler = () => {\r\n    if(this.props.isPlaying) {\r\n    this.audioRef.current.pause();\r\n    this.props.isplaying(!this.props.isPlaying);\r\n    } else if(!this.props.isPlaying){\r\n    this.audioRef.current.play();\r\n    this.props.isplaying(!this.props.isPlaying);\r\n         }\r\n    }\r\n     timeUpdateHandler = (e) => {\r\n        const current = e.target.currentTime;\r\n        const duration = e.target.duration;\r\n        \r\n        this.props.currentSongTime(current);\r\n        this.props.duration(duration);\r\n    }\r\n\r\n    endHandler =  () => {\r\n        let currentIndex = this.props.songs.findIndex((song) => song._id === this.props.currentSong);\r\n        let tempSong = this.props.songs[(currentIndex + 1) % this.props.songs.length];\r\n            this.props.setSong(tempSong._id,tempSong.name,tempSong.author,tempSong.movie,tempSong.audio,tempSong.cover);\r\n    }\r\n    skipTrackHandler = async (direction) => {\r\n        if(!this.props.queue) {\r\n            let currentIndex = this.props.songs.findIndex((song) => song._id === this.props.currentSong);\r\n       \r\n        if(direction == 'skip-forward') {\r\n            let tempSong = this.props.songs[(currentIndex + 1) % this.props.songs.length];\r\n            await this.props.setSong(tempSong._id,tempSong.name,tempSong.author,tempSong.movie,tempSong.audio,tempSong.cover);\r\n        }\r\n        if(direction == 'skip-back') {\r\n            if((currentIndex - 1) % this.props.songs.length === -1) {\r\n                let tempSong = this.props.songs[this.props.songs.length - 1];\r\n           await this.props.setSong(tempSong._id,tempSong.name,tempSong.author,tempSong.movie,tempSong.audio,tempSong.cover);\r\n            return ;\r\n            }\r\n            let tempSong = this.props.songs[(currentIndex - 1) % this.props.songs.length];\r\n            this.props.setSong(tempSong._id,tempSong.name,tempSong.author,tempSong.movie,tempSong.audio,tempSong.cover);\r\n        }\r\n        } else {\r\n            if(!this.props.queue) return this.endHandler();\r\n        let currentIndex = this.props.queue.findIndex((song) => song._id === this.props.currentSong);\r\n      \r\n       \r\n        if(direction == 'skip-forward') {\r\n           \r\n            let tempSong = this.props.queue[(currentIndex + 1) % this.props.queue.length];\r\n            await this.props.setSong(tempSong._id,tempSong.name,tempSong.author,tempSong.movie,tempSong.audio,tempSong.cover);\r\n        }\r\n        if(direction == 'skip-back') {\r\n            if((currentIndex - 1) % this.props.queue.length === -1) {\r\n                let tempSong = this.props.queue[this.props.queue.length - 1];\r\n           await this.props.setSong(tempSong._id,tempSong.name,tempSong.author,tempSong.movie,tempSong.audio,tempSong.cover);\r\n            return ;\r\n            }\r\n            let tempSong = this.props.queue[(currentIndex - 1) % this.props.queue.length];\r\n            this.props.setSong(tempSong._id,tempSong.name,tempSong.author,tempSong.movie,tempSong.audio,tempSong.cover);\r\n        }\r\n        }\r\n    }\r\n   \r\n    formatTime = (time) => {\r\n        return (\r\n            Math.floor(time/60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        )\r\n    }\r\n   \r\n    render() {\r\n\r\n    return(\r\n        <div className=\"screenplayer\">\r\n            <div className=\"nowplaying\">\r\n                { this.props.songphoto ?\r\n                <div className=\"song-info\">\r\n                    <div className=\"song-img-container\">\r\n                        <div className=\"song-img\">\r\n                         <img src={this.props.songphoto} alt=\"image\"/> \r\n                        </div>\r\n                        <div className=\"song-img-btn\">\r\n                            <button><Arrowup/></button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"song-txt-info\">\r\n                        <div className=\"song-name\">\r\n                        <Link to={this.props.songname}>{this.props.songname}</Link>\r\n                         \r\n                        </div>\r\n                        <div className=\"song-author\">\r\n                        <p>{this.props.songauthor}</p>\r\n                        </div>\r\n                    </div>\r\n                </div> : <span className=\"select-song\">Select a Song</span> }\r\n                <div className=\"like-song\">\r\n                <button><Heart/></button>\r\n                </div>\r\n                <div className=\"pip\">\r\n                    <button><Pip /></button>\r\n                </div>\r\n            </div>\r\n            <div className=\"player\">\r\n                <div className=\"player-controls\">\r\n                    <div className=\"player-nav-container\">\r\n                    <div className=\"player-nav\">\r\n                        <button><Shuffle /></button>\r\n                        <button><Previous onClick={() => this.skipTrackHandler('skip-back')}/></button>\r\n                        {this.playSongHandler}\r\n                        <button className=\"play-btn\" onClick={this.playSongHandler} onChangeCapture={this.playSongHandler}>{this.props.isPlaying  ?  <Pause  /> : <Play /> }</button>\r\n                        \r\n                        <button><Next onClick={() => this.skipTrackHandler('skip-forward')}/></button>\r\n                        <button><Repeat onClick={this.props.setRepeat}/></button>\r\n                    </div>\r\n                    <audio src={this.props.songtrack} ref={this.audioRef} autoPlay preload=\"true\" onTimeUpdate={this.timeUpdateHandler} onLoadedMetadata={this.timeUpdateHandler} onEnded={this.endHandler} />\r\n                    {/* <Audio isPlaying={this.props.isPlaying} songtrack={this.props.songtrack}/> */}\r\n                    </div>\r\n                    <div className=\"player-progress\">\r\n                       <div className=\"playback-bar\">\r\n                           <div className=\"start-time\">\r\n                                {this.formatTime(this.props.currentTime)}\r\n                           </div>\r\n                           <Player player={true} audref={this.audioRef} current={this.props.currentTime} duration={this.props.durations}/>\r\n                           <div className=\"end-time\">\r\n                                {this.formatTime(this.props.durations)}\r\n                           </div>\r\n                       </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n           \r\n            <div className=\"extra\">\r\n                <div className=\"extra-controls\">\r\n                    <button className=\"lyrics\"><Lyrics /></button>\r\n                    <button className=\"queue\"><Queue/></button>\r\n                    <button className=\"computer\"><Computer /></button>\r\n                    <button className=\"volume\"><Volume/></button>\r\n                    <div className=\"speaker-container\">\r\n                    <span className=\"speaker\"></span>\r\n                    <Player audref={this.audioRef}  volume={this.volumeHandler} />\r\n                    </div>\r\n                   \r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n    } \r\n} \r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        songs:state.tracks.songs,\r\n        currentSong: state.tracks.activeSongid,\r\n        songname: state.tracks.activeSongName,\r\n        songauthor: state.tracks.activeSongAuthor,\r\n        songphoto: state.tracks.activeSongCover,\r\n        songtrack: state.tracks.activeSongtrack,\r\n        isPlaying: state.tracks.isPlaying,\r\n        currentTime: state.tracks.currentTime,\r\n        durations: state.tracks.duration,\r\n        genre:state.tracks.genre,\r\n        queue:state.tracks.queue,\r\n        pause:state.tracks.pause\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        isplaying:(dec) => dispatch(isPlaying(dec)),\r\n        currentSongTime:(ctime) => dispatch(setCurrentTime(ctime)),\r\n        duration:(duration) => dispatch(setDuration(duration)),\r\n        setSong:(currSong,name,author,movie,audio,cover) => dispatch(setCurrent(currSong,name,author,movie,audio,cover)),\r\n        setRepeat:() => dispatch(setRepeatOn())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Screenplayer);","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\mainView.js",["95","96","97","98","99"],"import React, {Component, useEffect,useRef, useState} from 'react';\r\n// import {ReactComponent as Back} from '../Assets/back.svg';\r\n// import {ReactComponent as Forward} from '../Assets/forward.svg';\r\nimport {ReactComponent as User} from '../Assets/user.svg';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport {ReactComponent as Play} from '../Assets/play.svg';\r\nimport {ReactComponent as Pause} from '../Assets/pause.svg';\r\nimport Card from './card';\r\nimport {ReactComponent as Spot} from '../Assets/spotarrow.svg';\r\nimport { Link } from 'react-router-dom';\r\nimport {ReactComponent as Down} from '../Assets/userarrow.svg';\r\nimport Loader from 'react-loader-spinner';\r\nimport {initSongs , setCurrent , isPlaying , setLoad, addQueue , initPlaylists , setActivePlaylist } from '../store/actions/track';\r\n\r\nfunction MainView(props) {\r\n    useEffect(() => {\r\n        props.oninitSongs();\r\n        props.oninitPlaylist();\r\n    },[]);\r\n  \r\n    const mainRef = useRef(null);\r\n    return(\r\n        <>\r\n        <div className=\"mainArea\" >\r\n            <div className=\"main-head\">\r\n                <div className=\"main-controls\">\r\n                    <div className=\"navigation\"><FontAwesomeIcon icon={faAngleLeft} className=\"nav-control\" /></div>\r\n                    <div className=\"navigation\"><FontAwesomeIcon icon={faAngleRight} className=\"nav-control\" /></div>\r\n                </div>\r\n                <div className=\"main-right\">\r\n                    <button className=\"upgrade\">\r\n                        <span>UPGRADE</span>\r\n                    </button>\r\n                    <div className=\"user\">\r\n                        <User />\r\n                        <span>Aniket</span>\r\n                        <Down />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            { props.loading ? <div className=\"loader-wrapper\"><Loader className=\"main-loader\" color=\"#1db954\" /></div> :<div className=\"content-area\" ref={mainRef} >\r\n                <div className=\"content-top\">\r\n                <h2>Recently Played</h2>\r\n                <Link to=\"/seeall\" className=\"see\">See All</Link>\r\n                </div>\r\n                 <div className=\"music-cards\">\r\n                    \r\n                {props.songs && props.songs.map(song  => (\r\n                      <div className={props.songid === song._id && props.isPlaying ? \"music-card card-active\" : \"music-card\"} key={song._id}>\r\n                        <div className=\"music-card-content\">\r\n                            <div className=\"music-img-container\">\r\n                                <div className=\"music-img\">\r\n                                <img src={song.cover} alt=\"image\" />\r\n                                </div>\r\n                                {props.songid === song._id && props.isPlaying ? \r\n                                <span className=\"music-img-btn\" onClick={() => props.isplaying(!props.isPlaying)}>\r\n                                <button><Pause /></button>\r\n                            </span> : \r\n                            <span className=\"music-img-btn\" onClick={() => { props.onSetSong(song._id,song.name,song.author,song.movie,song.audio,song.cover); props.isplaying(!props.isPlaying)}}>\r\n                            <button><Play /></button>\r\n                        </span>\r\n                            }\r\n                          \r\n                            </div>\r\n                        <div className=\"music-card-footer\">\r\n                            <p>{song.name}</p>\r\n                             <span>{song.author}</span>\r\n                        </div>\r\n                        </div>\r\n                    </div> \r\n                ))}\r\n                </div>      \r\n               \r\n            \r\n                 {/* {props.playlists && props.playlists.map(song  => (\r\n                        <div className={props.songid === song._id && props.isPlaying || props.activePlaylist === song._id ? \"music-card card-active\" : \"music-card\"} key={song._id}>\r\n                        <div className=\"music-card-content\">\r\n                            <div className=\"music-img-container\">\r\n                                <div className=\"music-img\">\r\n                                {console.log(song.songs)}\r\n                                <img src={song.playCover} alt=\"image\" />\r\n                                </div>\r\n                                {props.songid === song._id || props.activePlaylist === song._id && props.isPlaying ? \r\n                                <div className=\"music-img-btn\" onClick={() => props.isplaying(false)}>\r\n                                <button><Pause /></button>\r\n                            </div> : \r\n                            <div className=\"music-img-btn\" onClick={() => { props.setQueue(song.songs);props.onSetSong(song.songs[0]._id,song.songs[0].name,song.songs[0].author,song.songs[0].movie,song.songs[0].audio,song.songs[0].cover);props.onactivePlaylist(song._id) }}>\r\n                            <button><Play /></button>\r\n                        </div>\r\n                            }\r\n                            </div>\r\n                        <div className=\"music-card-footer\">\r\n                            <p>{song.name}</p>\r\n                             <span>{song.author}</span>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                ))} */}\r\n                  {/* <Card playlists={props.playlists}/> */}\r\n                <Card playlists={props.trending} head=\"Trending Playlists\" subHead=\"Playlists we think you'll get hooked on.\" />\r\n             \r\n            </div> }\r\n        \r\n        </>\r\n    )  \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        songs:state.tracks.songs,\r\n        songid:state.tracks.activeSongid,\r\n        isPlaying:state.tracks.isPlaying,\r\n        playlists:state.tracks.playlists,\r\n        trending:state.tracks.trendingPlaylists,\r\n        activePlaylist:state.tracks.activePlaylist,\r\n        loading:state.tracks.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        oninitSongs:() => dispatch(initSongs()),\r\n        onSetSong:(currentSong,name,author,movie,audio,cover) => dispatch(setCurrent(currentSong,name,author,movie,audio,cover)),\r\n        isplaying:(dec) => dispatch(isPlaying(dec)),\r\n        setQueue:(song) => dispatch(addQueue(song)),\r\n        oninitPlaylist:() => dispatch(initPlaylists()),\r\n        onactivePlaylist:(songid) => dispatch(setActivePlaylist(songid)),\r\n        load:() => dispatch(setLoad())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MainView);","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\player.js",[],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\store\\actions\\track.js",[],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\card.js",["100","101","102","103","104","105","106","107"],"import React, { useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {ReactComponent as Play} from '../Assets/play.svg';\r\nimport {ReactComponent as Pause} from '../Assets/pause.svg';\r\nimport {initSongs , setCurrent , isPlaying , addQueue , initPlaylists , setActivePlaylist} from '../store/actions/track';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    const linkHandler = (id) => {\r\n        props.history.push(`/playlist/${id}`);\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div className=\"content-top\">\r\n                    <div className=\"content-head\">\r\n                    <h2>{props.head}</h2>\r\n                    <p>{props.subHead}</p>\r\n                    </div>\r\n                {props.nosee ? null :<Link to=\"seall\" className=\"see\">See All</Link>}\r\n                </div>\r\n        <div className=\"music-cards\">\r\n            {props.moreSongs ?   \r\n            props.playlists && props.playlists.map(song => (\r\n            <div  className={props.songid === song._id && props.isPlaying  ? \"music-card card-active\" : \"music-card\"} key={song._id}>\r\n            <div className=\"music-card-content\">\r\n                <div className=\"music-img-container\">\r\n                    <div className=\"music-img\">\r\n                   \r\n                    <img src={song.playCover ? song.playCover : song.cover} alt=\"image\" />\r\n                    </div>\r\n                    {props.songid === song._id  && props.isPlaying ? \r\n                    <div className=\"music-img-btn\">\r\n                    <button onClick={() => props.isplaying(false)}><Pause /></button>\r\n                </div> : \r\n                <div className=\"music-img-btn\">\r\n                    \r\n                <div  onClick={() => { props.onSetSong(song._id,song.name,song.author,song.movie,song.audio,song.cover);props.onactivePlaylist(song._id) }}><Play /></div>\r\n            </div>\r\n                }\r\n                </div>\r\n            <div className=\"music-card-footer\">\r\n                <p>{song.name}</p>\r\n                 <span>{song.author}</span>\r\n            </div>\r\n            </div>\r\n        </div> \r\n            ))\r\n            :  props.playlists && props.playlists.map(song  => (\r\n          <div  className={props.songid === song._id && props.isPlaying || props.activePlaylist === song._id ? \"music-card card-active\" : \"music-card\"} key={song._id}>\r\n            <div className=\"music-card-content\">\r\n                <div className=\"music-img-container\">\r\n                    <div className=\"music-img\" onClick={() => linkHandler(song._id)}>\r\n                   \r\n                    <img src={song.playCover ? song.playCover : song.cover} alt=\"image\" />\r\n                    </div>\r\n                    {props.songid === song._id || props.activePlaylist === song._id && props.isPlaying ? \r\n                    <div className=\"music-img-btn\">\r\n                    <button onClick={() => props.isplaying(false)}><Pause /></button>\r\n                </div> : \r\n                <div className=\"music-img-btn\">\r\n                    \r\n                <div  onClick={() => {  props.setQueue(song.songs);props.onSetSong(song.songs[0]._id,song.songs[0].name,song.songs[0].author,song.songs[0].movie,song.songs[0].audio,song.songs[0].cover);props.onactivePlaylist(song._id)  }}><Play /></div>\r\n            </div>\r\n                }\r\n                </div>\r\n            <div className=\"music-card-footer\" onClick={() => linkHandler(song._id)}>\r\n                <p>{song.name}</p>\r\n                 <span>{song.author}</span>\r\n            </div>\r\n            </div>\r\n        </div> \r\n    ))}\r\n        \r\n  \r\n     </div>\r\n     </>\r\n    )\r\n   \r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        songs:state.tracks.songs,\r\n        songid:state.tracks.activeSongid,\r\n        isPlaying:state.tracks.isPlaying,\r\n        // playlists:state.tracks.playlists,\r\n        activePlaylist:state.tracks.activePlaylist\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        oninitSongs:() => dispatch(initSongs()),\r\n        onSetSong:(currentSong,name,author,movie,audio,cover) => dispatch(setCurrent(currentSong,name,author,movie,audio,cover)),\r\n        isplaying:(dec) => dispatch(isPlaying(dec)),\r\n        setQueue:(song) => dispatch(addQueue(song)),\r\n        oninitPlaylist:() => dispatch(initPlaylists()),\r\n        onactivePlaylist:(songid) => dispatch(setActivePlaylist(songid))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Card));","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\playlist.js",["108","109","110","111","112","113","114","115","116"],"import React , {Component, useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faAngleRight } from '@fortawesome/free-solid-svg-icons';\r\nimport {ReactComponent as User} from '../Assets/user.svg';\r\nimport axios from 'axios';\r\nimport { ReactComponent as Play} from '../Assets/play.svg';\r\nimport {ReactComponent as Like} from '../Assets/translike.svg';\r\nimport {ReactComponent as Options} from '../Assets/options.svg';\r\nimport {ReactComponent as Clock} from '../Assets/clock.svg';\r\nimport Card from './card';\r\nimport { currentPlaylist } from '../store/actions/track';\r\nimport Loader from 'react-loader-spinner';\r\nimport {setLoad} from '../store/actions/track';\r\nimport {ReactComponent as Pause} from '../Assets/pause.svg';\r\nimport Menu from './dropdown';\r\nimport Backdrop from './backdrop';\r\nimport {ReactComponent as Down} from '../Assets/userarrow.svg';\r\nimport Item from './item';\r\nimport Divider from './divider';\r\nimport {initSongs , setCurrent , isPlaying , addQueue , initPlaylists , setActivePlaylist} from '../store/actions/track';\r\n\r\n\r\nclass Playlist extends Component {\r\n    state = {\r\n        songs:[],\r\n        name:null,\r\n        playCover:null,\r\n        author:null,\r\n        year:null,\r\n        totalsong:null,\r\n        totalduration:null,\r\n        moreSongs:[],\r\n        color:'',\r\n        secondary:'',\r\n        id:null,\r\n        drop:false,\r\n        navDrop:false\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.navRef = React.createRef();\r\n        this.navDiv = React.createRef();\r\n        this.albumHeader = React.createRef();\r\n        this.albumList = React.createRef();\r\n        this.extraNav = React.createRef();\r\n    }\r\n\r\n\r\n    // componentWillReceiveProps(nextProps) {\r\n    //     if(nextProps.location.pathname !== this.props.location.pathname) {\r\n    //         console.log(\"Next Props\");\r\n          \r\n    //         axios.get(`http://localhost:5000${this.props.location.pathname}`).then(res => {\r\n             \r\n    //         this.setState({songs:res.data.playlist.songs,name:res.data.playlist.name,playCover:res.data.playlist.playCover,author:res.data.playlist.author,year:res.data.playlist.year,totalsong:res.data.playlist.totalsong,totalduration:res.data.playlist.totalDuration,moreSongs:res.data.morePlaylist,id:res.data.playlist.id});\r\n    //         console.log(res.data.playlist.id);\r\n    //     }).catch(err => {\r\n   \r\n    //         console.log(err);\r\n    //     })\r\n    //     }\r\n    // }\r\n componentDidMount() {\r\n    this.props.load();\r\n        axios.get(`https://spottify.herokuapp.com${this.props.location.pathname}`).then(res => {\r\n            this.props.load();\r\n            this.setState({songs:res.data.playlist.songs,name:res.data.playlist.name,playCover:res.data.playlist.playCover,author:res.data.playlist.author,year:res.data.playlist.year,totalsong:res.data.playlist.totalsong,totalduration:res.data.playlist.totalDuration,moreSongs:res.data.morePlaylist,id:res.data.playlist.id,color:res.data.playlist.color,secondary:res.data.playlist.secondary});\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n        this.navDiv.current.style.background = this.state.color;\r\n    \r\n        this.albumHeader.current.style.background = `linear-gradient(${this.state.color} 0% , black 190%`;\r\n        this.albumList.current.style.background = `linear-gradient(to bottom , ${this.state.color} -141% , rgba(0,0,0,0))`;\r\n }\r\n    change = () => {\r\n     if(this.navRef.current.scrollTop > 350) {\r\n        this.navDiv.current.style.background = this.state.secondary;\r\n        this.extraNav.current.style.visibility = 'visible';\r\n        } else {\r\n            this.navDiv.current.style.background = this.state.color;\r\n            this.extraNav.current.style.visibility = 'hidden';\r\n        }\r\n     }\r\n\r\n     dropdownHandler = () => {\r\n         this.setState(prevState => ({drop:!prevState.drop}));\r\n     }\r\n     navdropdownHandler = () => {\r\n         this.setState(prevState => ({navDrop:!prevState.navDrop}));\r\n     }\r\n     formatTime = (time) => {\r\n        return (\r\n            Math.floor(time/60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let icon=null;\r\n        if(this.props.loading) {\r\n           icon = ( <div className=\"loader-wrapper\"><Loader className=\"main-loader\" color=\"#1db954\" /></div> )\r\n        }\r\n    return(\r\n        <>\r\n       \r\n        <div className=\"mainArea\" ref={this.navDiv} style={{backgroundColor:this.state.color}} >\r\n        <div className=\"main-head\" >\r\n            <div className=\"main-controls\">\r\n                <div className=\"navigation\" onClick={this.props.history.goBack} ><FontAwesomeIcon  icon={faAngleLeft} className=\"nav-control\" /></div>\r\n                <div className=\"navigation\" onClick={this.props.history.goForward}><FontAwesomeIcon icon={faAngleRight} className=\"nav-control\" /></div>\r\n                <div className=\"extra-nav\" ref={this.extraNav}>\r\n                { this.props.isPlaying && this.state.id === this.props.activePlaylist ? \r\n                                <span className=\"nav-play-btn\" onClick={() => this.props.isplaying(false)}>\r\n                                <button><Pause /></button>\r\n                            </span> : \r\n                            <span className=\"nav-play-btn\" onClick={() => {this.props.onactivePlaylist(this.state.id); this.props.onSetSong(this.state.songs[0]._id,this.state.songs[0].name,this.state.songs[0].author,this.state.songs[0].movie,this.state.songs[0].audio,this.state.songs[0].cover);this.props.setQueue(this.state.songs); this.props.isplaying(true)}}>\r\n                            <button><Play /></button>\r\n                        </span>\r\n                            }\r\n                {/* <div className=\"nav-play-btn\"><button><Play /></button></div> */}\r\n                <p>{this.state.name}</p>\r\n                </div>\r\n               \r\n            </div>\r\n            <div className=\"main-right\">\r\n                <button className=\"upgrade\">\r\n                    <span>UPGRADE</span>\r\n                </button>\r\n                <div className=\"user\" onClick={this.navdropdownHandler}>\r\n                    <div className=\"user-wrapper\">\r\n                        <User />\r\n                    </div>\r\n                        <span>Aniket</span>\r\n                        <Down />\r\n                        {this.state.navDrop ? <Menu>\r\n                            <Item>Account</Item>\r\n                            <Item border>Profile</Item>\r\n                            <Item>Logout</Item>\r\n                        </Menu> : null}\r\n                        \r\n                    </div>\r\n                    {this.state.navDrop ? <Backdrop clicked={this.navdropdownHandler} show={this.state.navDrop} /> : null}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        \r\n        <div className=\"content-area\" onScroll={this.change} ref={this.navRef}>\r\n        {icon}\r\n            <div className=\"album-header\" ref={this.albumHeader} style={{background:`linear-gradient(${this.state.color} 0% , black 190%`}}>\r\n            <img src={this.state.playCover} className=\"album-photo\"/>\r\n            <div className=\"album-details\">\r\n                <p>ALBUM</p>\r\n                <span className=\"album-title\">{this.state.name}</span>\r\n                <div className=\"author-details\">\r\n                <p className=\"author-name\">{this.state.author}</p><span className=\"author-year\">{this.state.year}</span><span>{this.state.totalsong} songs, {this.state.totalduration} min</span>\r\n                </div>\r\n            </div>\r\n            </div>\r\n           <div className=\"album-list\" ref={this.albumList} style={{background:`linear-gradient(to bottom , ${this.state.color} -141% , rgba(0,0,0,0))`}}>\r\n                <div className=\"album-options\">\r\n                \r\n                { this.props.isPlaying && this.state.id === this.props.activePlaylist ? \r\n                                <span className=\"btn-play\" onClick={() => this.props.isplaying(false)}>\r\n                                <button><Pause /></button>\r\n                            </span> : \r\n                            <span className=\"btn-play\" onClick={() => {this.props.onactivePlaylist(this.state.id); this.props.onSetSong(this.state.songs[0]._id,this.state.songs[0].name,this.state.songs[0].author,this.state.songs[0].movie,this.state.songs[0].audio,this.state.songs[0].cover);this.props.setQueue(this.state.songs); this.props.isplaying(true)}}>\r\n                            <button><Play /></button>\r\n                        </span>\r\n                            }\r\n                    {/* <div className=\"btn-play\"><button><Play /></button></div> */}\r\n                    <div className=\"btn-like\"><button><Like /></button></div>\r\n                    <div className=\"btn-options\"><button><Options onClick={this.dropdownHandler} /></button> {this.state.drop ? \r\n                   <Menu>\r\n                      <Item>Add to Queue</Item>\r\n                      <Item border>Go to Artist Radio</Item>\r\n                    <Item>Add to Playlist</Item>\r\n                    <Item border>Add to Your Library</Item>\r\n                    <Item border>Share</Item>\r\n                    <Item>Open in Desktop App</Item>\r\n                   </Menu>\r\n                    : null}</div>\r\n                    {this.state.drop ? <Backdrop clicked={this.dropdownHandler} show={this.state.drop} /> : null}\r\n                </div>\r\n                <div className=\"table\">\r\n                    <div className=\"table-head\">\r\n                        <p>#</p>\r\n                        <span className=\"sub\">TITLE</span>\r\n                        <span className=\"clock\"><Clock /></span>\r\n                    </div>                  \r\n                    {this.state.songs.map((song,i) => (\r\n                     <div className={this.props.isPlaying && song._id === this.props.activeSongs || song._id === this.props.activeSongs ? \"table-songs table-songs-active\" : \"table-songs\"} key={song._id} onClick={() => {this.props.onSetSong(song._id,song.name,song.author,song.movie,song.audio,song.cover);this.props.onactivePlaylist(this.state.id);this.props.setQueue(this.state.songs)}}>\r\n                     <span className=\"color-b3\">{ this.props.isPlaying && song._id === this.props.activeSongs  ? <Loader className=\"loader\"/> : i+1}</span>\r\n                     <div className=\"table-song-title\">\r\n                         <span>{song.name}</span>\r\n                         <span className=\"sub\">{song.author}</span>\r\n                     </div>\r\n                     <span className=\"table-song-duration\">{this.formatTime(song.duration)}</span>\r\n                 </div>\r\n                  ))}\r\n                </div>\r\n           </div>\r\n           <div className=\"more\">\r\n                <Card playlists={this.state.moreSongs} head={`More By ${this.state.author}`} moreSongs=\"true\" nosee/>\r\n           </div>\r\n            </div>      \r\n            \r\n    </>\r\n    )\r\n        }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading:state.tracks.loading,\r\n        isPlaying:state.tracks.isPlaying,\r\n        activePlaylist:state.tracks.activePlaylist,\r\n        activeSongs:state.tracks.activeSongid\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        load:() => dispatch(setLoad()),\r\n        onSetSong:(currentSong,name,author,movie,audio,cover) => dispatch(setCurrent(currentSong,name,author,movie,audio,cover)),\r\n        setQueue:(song) => dispatch(addQueue(song)),\r\n        isplaying:(dec) => dispatch(isPlaying(dec)),\r\n        onactivePlaylist:(songid) => dispatch(setActivePlaylist(songid))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Playlist));","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\dropdown.js",["117"],"import React from 'react';\r\nimport Item from './item';\r\n\r\nfunction DropdownMenu(props) {\r\n\r\n        return(\r\n            <ul className=\"dropdown\">\r\n                {props.children}\r\n             </ul>\r\n        )\r\n}\r\n\r\n\r\nexport default DropdownMenu;","C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\backdrop.js",[],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\item.js",["118"],"import React from 'react';\r\nfunction Item(props) {\r\n    return(\r\n        <>\r\n            <li className={props.border ? \"drop-divider\" : null}>\r\n                <a href=\"#\">\r\n                    {props.children}\r\n                </a>\r\n            </li>\r\n       </>\r\n    )\r\n}\r\n\r\nexport default Item;",["119","120"],"C:\\Users\\KIIT\\Desktop\\React\\Frontend\\spotiffy\\src\\pages\\divider.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":2,"column":9,"nodeType":"127","messageId":"128","endLine":2,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":70,"column":9,"nodeType":"131","messageId":"132","endLine":74,"endColumn":14},{"ruleId":"129","severity":1,"message":"130","line":75,"column":9,"nodeType":"131","messageId":"132","endLine":79,"endColumn":14},{"ruleId":"125","severity":1,"message":"133","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":20},{"ruleId":"134","severity":1,"message":"135","line":17,"column":17,"nodeType":"136","endLine":17,"endColumn":51},{"ruleId":"125","severity":1,"message":"137","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":23},{"ruleId":"125","severity":1,"message":"138","line":1,"column":26,"nodeType":"127","messageId":"128","endLine":1,"endColumn":35},{"ruleId":"139","severity":1,"message":"140","line":62,"column":22,"nodeType":"141","messageId":"132","endLine":62,"endColumn":24},{"ruleId":"139","severity":1,"message":"140","line":66,"column":22,"nodeType":"141","messageId":"132","endLine":66,"endColumn":24},{"ruleId":"139","severity":1,"message":"140","line":80,"column":22,"nodeType":"141","messageId":"132","endLine":80,"endColumn":24},{"ruleId":"139","severity":1,"message":"140","line":85,"column":22,"nodeType":"141","messageId":"132","endLine":85,"endColumn":24},{"ruleId":"142","severity":1,"message":"143","line":112,"column":26,"nodeType":"136","endLine":112,"endColumn":71},{"ruleId":"125","severity":1,"message":"144","line":1,"column":16,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"145","line":1,"column":45,"nodeType":"127","messageId":"128","endLine":1,"endColumn":53},{"ruleId":"125","severity":1,"message":"146","line":12,"column":27,"nodeType":"127","messageId":"128","endLine":12,"endColumn":31},{"ruleId":"147","severity":1,"message":"148","line":22,"column":7,"nodeType":"149","endLine":22,"endColumn":9,"suggestions":"150"},{"ruleId":"142","severity":1,"message":"143","line":57,"column":33,"nodeType":"136","endLine":57,"endColumn":69},{"ruleId":"125","severity":1,"message":"138","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":26},{"ruleId":"125","severity":1,"message":"151","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":13},{"ruleId":"142","severity":1,"message":"143","line":34,"column":21,"nodeType":"136","endLine":34,"endColumn":91},{"ruleId":"152","severity":1,"message":"153","line":54,"column":54,"nodeType":"154","messageId":"155","endLine":54,"endColumn":56},{"ruleId":"152","severity":1,"message":"153","line":54,"column":73,"nodeType":"154","messageId":"155","endLine":54,"endColumn":75},{"ruleId":"142","severity":1,"message":"143","line":59,"column":21,"nodeType":"136","endLine":59,"endColumn":91},{"ruleId":"152","severity":1,"message":"156","line":61,"column":48,"nodeType":"154","messageId":"155","endLine":61,"endColumn":50},{"ruleId":"152","severity":1,"message":"156","line":61,"column":85,"nodeType":"154","messageId":"155","endLine":61,"endColumn":87},{"ruleId":"125","severity":1,"message":"138","line":1,"column":28,"nodeType":"127","messageId":"128","endLine":1,"endColumn":37},{"ruleId":"125","severity":1,"message":"145","line":1,"column":39,"nodeType":"127","messageId":"128","endLine":1,"endColumn":47},{"ruleId":"125","severity":1,"message":"157","line":14,"column":10,"nodeType":"127","messageId":"128","endLine":14,"endColumn":25},{"ruleId":"125","severity":1,"message":"158","line":22,"column":8,"nodeType":"127","messageId":"128","endLine":22,"endColumn":15},{"ruleId":"125","severity":1,"message":"159","line":23,"column":9,"nodeType":"127","messageId":"128","endLine":23,"endColumn":18},{"ruleId":"125","severity":1,"message":"160","line":23,"column":57,"nodeType":"127","messageId":"128","endLine":23,"endColumn":70},{"ruleId":"134","severity":1,"message":"135","line":153,"column":13,"nodeType":"136","endLine":153,"endColumn":70},{"ruleId":"152","severity":1,"message":"153","line":194,"column":59,"nodeType":"154","messageId":"155","endLine":194,"endColumn":61},{"ruleId":"152","severity":1,"message":"153","line":194,"column":98,"nodeType":"154","messageId":"155","endLine":194,"endColumn":100},{"ruleId":"125","severity":1,"message":"161","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":12},{"ruleId":"162","severity":1,"message":"163","line":6,"column":17,"nodeType":"136","endLine":6,"endColumn":29},{"ruleId":"121","replacedBy":"164"},{"ruleId":"123","replacedBy":"165"},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'ScreenPlayer' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Component' is defined but never used.","'useState' is defined but never used.","'Spot' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["168"],"'axios' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'currentPlaylist' is defined but never used.","'Divider' is defined but never used.","'initSongs' is defined but never used.","'initPlaylists' is defined but never used.","'Item' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["166"],["167"],"no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Update the dependencies array to be: [props]",{"range":"171","text":"172"},[1122,1124],"[props]"]